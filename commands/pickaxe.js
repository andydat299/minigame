const { EmbedBuilder } = require('discord.js');
const Database = require('../database/database');

const pickaxeData = {
    1: { name: 'Cu·ªëc G·ªó', durability: 50, efficiency: 1, price: 0 },
    2: { name: 'Cu·ªëc ƒê√°', durability: 80, efficiency: 1.2, price: 500 },
    3: { name: 'Cu·ªëc ƒê·ªìng', durability: 120, efficiency: 1.5, price: 1000 },
    4: { name: 'Cu·ªëc S·∫Øt', durability: 180, efficiency: 2, price: 2000 },
    5: { name: 'Cu·ªëc V√†ng', durability: 100, efficiency: 3, price: 3500 },
    6: { name: 'Cu·ªëc Kim C∆∞∆°ng', durability: 300, efficiency: 2.5, price: 5000 },
    7: { name: 'Cu·ªëc Netherite', durability: 400, efficiency: 3.5, price: 8000 },
    8: { name: 'Cu·ªëc Emerald', durability: 350, efficiency: 4, price: 12000 },
    9: { name: 'Cu·ªëc Ruby', durability: 450, efficiency: 4.5, price: 18000 },
    10: { name: 'Cu·ªëc Sapphire', durability: 500, efficiency: 5, price: 25000 },
    11: { name: 'Cu·ªëc Obsidian', durability: 600, efficiency: 6, price: 35000 },
    12: { name: 'Cu·ªëc Mythril', durability: 700, efficiency: 7, price: 50000 },
    13: { name: 'Cu·ªëc Adamant', durability: 800, efficiency: 8, price: 70000 },
    14: { name: 'Cu·ªëc Titanium', durability: 900, efficiency: 9, price: 100000 },
    15: { name: 'Cu·ªëc Plasma', durability: 1000, efficiency: 10, price: 150000 },
    16: { name: 'Cu·ªëc Quantum', durability: 1200, efficiency: 12, price: 220000 },
    17: { name: 'Cu·ªëc Cosmic', durability: 1500, efficiency: 15, price: 320000 },
    18: { name: 'Cu·ªëc Divine', durability: 2000, efficiency: 20, price: 500000 },
    19: { name: 'Cu·ªëc Legendary', durability: 2500, efficiency: 25, price: 800000 },
    20: { name: 'Cu·ªëc Eternal', durability: 3000, efficiency: 30, price: 1200000 }
};

module.exports = {
    name: 'pickaxe',
    description: 'Qu·∫£n l√Ω cu·ªëc ƒë√†o - xem, n√¢ng c·∫•p, s·ª≠a ch·ªØa',
    async execute(message, args, client) {
        const userId = message.author.id;
        const username = message.author.username;
        const action = args[0]?.toLowerCase();

        await Database.createUser(userId, username);

        if (!action || action === 'info') {
            // Hi·ªÉn th·ªã th√¥ng tin cu·ªëc hi·ªán t·∫°i
            await this.showPickaxeInfo(message, userId);
        } else if (action === 'shop' || action === 'upgrade') {
            // Hi·ªÉn th·ªã shop n√¢ng c·∫•p cu·ªëc
            await this.showPickaxeShop(message, userId);
        } else if (action === 'buy' || action === 'up') {
            // N√¢ng c·∫•p cu·ªëc
            const level = parseInt(args[1]);
            await this.buyPickaxe(message, userId, level);
        } else if (action === 'repair') {
            // S·ª≠a ch·ªØa cu·ªëc
            await this.repairPickaxe(message, userId);
        } else {
            message.reply('‚ùå S·ª≠ d·ª•ng: `!pickaxe [info/upgrade/buy <level>/repair]`');
        }
    },

    async showPickaxeInfo(message, userId) {
        const userPickaxe = await this.getUserPickaxe(userId);
        
        if (!userPickaxe) {
            return message.reply('‚ùå B·∫°n ch∆∞a c√≥ cu·ªëc! S·ª≠ d·ª•ng `!mining` ƒë·ªÉ nh·∫≠n cu·ªëc ƒë·∫ßu ti√™n.');
        }

        const pickaxe = pickaxeData[userPickaxe.level];
        const durabilityPercent = Math.floor((userPickaxe.durability / userPickaxe.max_durability) * 100);
        
        // T·∫°o thanh ƒë·ªô b·ªÅn
        const barLength = 10;
        const filledBars = Math.floor((durabilityPercent / 100) * barLength);
        const emptyBars = barLength - filledBars;
        const durabilityBar = '‚ñà'.repeat(filledBars) + '‚ñë'.repeat(emptyBars);

        const embed = new EmbedBuilder()
            .setTitle('‚õèÔ∏è Th√¥ng tin cu·ªëc c·ªßa b·∫°n')
            .setDescription(`**${pickaxe.name}** (Level ${userPickaxe.level})`)
            .addFields(
                { 
                    name: 'üîß ƒê·ªô b·ªÅn', 
                    value: `${durabilityBar} ${userPickaxe.durability}/${userPickaxe.max_durability} (${durabilityPercent}%)`, 
                    inline: false 
                },
                { name: '‚ö° Hi·ªáu su·∫•t', value: `x${pickaxe.efficiency}`, inline: true },
                { name: 'üí∞ Gi√° tr·ªã', value: `${pickaxe.price.toLocaleString()} coins`, inline: true },
                { 
                    name: 'üî® Chi ph√≠ s·ª≠a ch·ªØa', 
                    value: `${Math.floor(pickaxe.price * 0.3).toLocaleString()} coins`, 
                    inline: true 
                }
            )
            .setColor(durabilityPercent > 50 ? '#00ff00' : durabilityPercent > 20 ? '#ffaa00' : '#ff0000')
            .setFooter({ text: 'S·ª≠ d·ª•ng !pickaxe upgrade ƒë·ªÉ n√¢ng c·∫•p cu·ªëc' });

        message.reply({ embeds: [embed] });
    },

    async showPickaxeShop(message, userId) {
        const userPickaxe = await this.getUserPickaxe(userId);
        const currentLevel = userPickaxe ? userPickaxe.level : 0;

        const embed = new EmbedBuilder()
            .setTitle('ÔøΩ N√¢ng c·∫•p cu·ªëc')
            .setDescription('N√¢ng c·∫•p cu·ªëc ƒë·ªÉ tƒÉng hi·ªáu su·∫•t ƒë√†o!')
            .setColor('#ff6b35');

        if (currentLevel >= 20) {
            embed.setDescription('üéâ Cu·ªëc c·ªßa b·∫°n ƒë√£ ƒë·∫°t level t·ªëi ƒëa!');
            return message.reply({ embeds: [embed] });
        }

        // Hi·ªÉn th·ªã cu·ªëc hi·ªán t·∫°i v√† level ti·∫øp theo
        if (currentLevel > 0) {
            const currentPickaxe = pickaxeData[currentLevel];
            embed.addFields({
                name: `‚öíÔ∏è Cu·ªëc hi·ªán t·∫°i - Level ${currentLevel}`,
                value: `${currentPickaxe.name}\n‚ö° Hi·ªáu su·∫•t: x${currentPickaxe.efficiency}\nüîß ƒê·ªô b·ªÅn: ${currentPickaxe.durability}`,
                inline: false
            });
        }

        // Hi·ªÉn th·ªã upgrade ti·∫øp theo
        const nextLevel = currentLevel + 1;
        const nextPickaxe = pickaxeData[nextLevel];
        const upgradeCost = Math.floor(nextPickaxe.price * 0.7); // Gi·∫£m gi√° upgrade

        embed.addFields({
            name: `üÜô N√¢ng c·∫•p l√™n Level ${nextLevel}`,
            value: `**${nextPickaxe.name}**\n‚ö° Hi·ªáu su·∫•t: x${nextPickaxe.efficiency} (+${(nextPickaxe.efficiency - (pickaxeData[currentLevel]?.efficiency || 0)).toFixed(1)})\nüîß ƒê·ªô b·ªÅn: ${nextPickaxe.durability} (+${nextPickaxe.durability - (pickaxeData[currentLevel]?.durability || 0)})\nüí∞ **Chi ph√≠ n√¢ng c·∫•p: ${upgradeCost.toLocaleString()} coins**`,
            inline: false
        });

        embed.setFooter({ text: `S·ª≠ d·ª•ng !pickaxe buy ${nextLevel} ƒë·ªÉ n√¢ng c·∫•p cu·ªëc` });

        message.reply({ embeds: [embed] });
    },

    async buyPickaxe(message, userId, level) {
        if (!level || level < 1 || level > 20) {
            return message.reply('‚ùå Level cu·ªëc ph·∫£i t·ª´ 1-20!');
        }

        const user = await Database.getUser(userId);
        const userPickaxe = await this.getUserPickaxe(userId);
        
        if (!userPickaxe) {
            // T·∫°o cu·ªëc level 1 ƒë·∫ßu ti√™n mi·ªÖn ph√≠
            if (level !== 1) {
                return message.reply('‚ùå B·∫°n c·∫ßn c√≥ cu·ªëc c∆° b·∫£n tr∆∞·ªõc! S·ª≠ d·ª•ng !mining ƒë·ªÉ nh·∫≠n cu·ªëc ƒë·∫ßu ti√™n.');
            }
            await this.createUserPickaxe(userId, 1);
            return message.reply('üéâ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c cu·ªëc g·ªó mi·ªÖn ph√≠! S·ª≠ d·ª•ng !mining ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒë√†o.');
        }

        const currentLevel = userPickaxe.level;
        
        // Ch·ªâ cho ph√©p n√¢ng c·∫•p l√™n level ti·∫øp theo
        if (level !== currentLevel + 1) {
            return message.reply(`‚ùå B·∫°n ch·ªâ c√≥ th·ªÉ n√¢ng c·∫•p l√™n level ti·∫øp theo (Level ${currentLevel + 1})!`);
        }

        if (level > 20) {
            return message.reply('‚ùå Cu·ªëc ƒë√£ ƒë·∫°t level t·ªëi ƒëa (20)!');
        }

        const nextPickaxe = pickaxeData[level];
        const upgradeCost = Math.floor(nextPickaxe.price * 0.7); // Gi·∫£m 30% so v·ªõi gi√° g·ªëc

        if (user.balance < upgradeCost) {
            return message.reply(`‚ùå B·∫°n c·∫ßn ${upgradeCost.toLocaleString()} coins ƒë·ªÉ n√¢ng c·∫•p l√™n ${nextPickaxe.name}!`);
        }

        // T√≠nh to√°n ƒë·ªô b·ªÅn sau n√¢ng c·∫•p (gi·ªØ l·∫°i % ƒë·ªô b·ªÅn hi·ªán t·∫°i)
        const currentDurabilityPercent = userPickaxe.durability / userPickaxe.max_durability;
        const newDurability = Math.floor(nextPickaxe.durability * currentDurabilityPercent);

        // C·∫≠p nh·∫≠t database
        await Database.updateUserBalance(userId, -upgradeCost);
        await this.upgradeUserPickaxe(userId, level, newDurability);

        const embed = new EmbedBuilder()
            .setTitle('üîß N√¢ng c·∫•p cu·ªëc th√†nh c√¥ng!')
            .setDescription(`Cu·ªëc ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p l√™n **${nextPickaxe.name}** (Level ${level})!`)
            .addFields(
                { name: '‚ö° Hi·ªáu su·∫•t m·ªõi', value: `x${nextPickaxe.efficiency}`, inline: true },
                { name: 'üîß ƒê·ªô b·ªÅn t·ªëi ƒëa', value: `${nextPickaxe.durability}`, inline: true },
                { name: 'ÔøΩ ƒê·ªô b·ªÅn hi·ªán t·∫°i', value: `${newDurability}/${nextPickaxe.durability}`, inline: true },
                { name: 'üí∞ Chi ph√≠ n√¢ng c·∫•p', value: `${upgradeCost.toLocaleString()} coins`, inline: true }
            )
            .setColor('#00ff00')
            .setFooter({ text: 'S·ª≠ d·ª•ng !mining ƒë·ªÉ test cu·ªëc m·ªõi!' });

        message.reply({ embeds: [embed] });
    },

    async repairPickaxe(message, userId) {
        const userPickaxe = await this.getUserPickaxe(userId);
        
        if (!userPickaxe) {
            return message.reply('‚ùå B·∫°n ch∆∞a c√≥ cu·ªëc ƒë·ªÉ s·ª≠a ch·ªØa!');
        }

        if (userPickaxe.durability >= userPickaxe.max_durability) {
            return message.reply('‚ùå Cu·ªëc c·ªßa b·∫°n v·∫´n c√≤n nguy√™n v·∫πn!');
        }

        const pickaxe = pickaxeData[userPickaxe.level];
        const repairCost = Math.floor(pickaxe.price * 0.3);
        const user = await Database.getUser(userId);

        if (user.balance < repairCost) {
            return message.reply(`‚ùå B·∫°n c·∫ßn ${repairCost.toLocaleString()} coins ƒë·ªÉ s·ª≠a ch·ªØa cu·ªëc!`);
        }

        // S·ª≠a ch·ªØa
        await Database.updateUserBalance(userId, -repairCost);
        await this.repairUserPickaxe(userId);

        const embed = new EmbedBuilder()
            .setTitle('üî® S·ª≠a ch·ªØa th√†nh c√¥ng!')
            .setDescription(`**${pickaxe.name}** ƒë√£ ƒë∆∞·ª£c s·ª≠a ch·ªØa ho√†n to√†n!`)
            .addFields(
                { name: 'üîß ƒê·ªô b·ªÅn', value: `${userPickaxe.max_durability}/${userPickaxe.max_durability}`, inline: true },
                { name: 'üí∞ Chi ph√≠', value: `${repairCost.toLocaleString()} coins`, inline: true }
            )
            .setColor('#00ff00');

        message.reply({ embeds: [embed] });
    },

    // Helper functions
    async getUserPickaxe(userId) {
        return new Promise((resolve, reject) => {
            Database.db.get(
                'SELECT * FROM user_pickaxes WHERE user_id = ?',
                [userId],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                }
            );
        });
    },

    async createUserPickaxe(userId, level) {
        const pickaxe = pickaxeData[level];
        return new Promise((resolve, reject) => {
            Database.db.run(
                'INSERT INTO user_pickaxes (user_id, level, durability, max_durability) VALUES (?, ?, ?, ?)',
                [userId, level, pickaxe.durability, pickaxe.durability],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.lastID);
                }
            );
        });
    },

    async updateUserPickaxe(userId, level) {
        const pickaxe = pickaxeData[level];
        return new Promise((resolve, reject) => {
            Database.db.run(
                'UPDATE user_pickaxes SET level = ?, durability = ?, max_durability = ? WHERE user_id = ?',
                [level, pickaxe.durability, pickaxe.durability, userId],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.changes);
                }
            );
        });
    },

    async upgradeUserPickaxe(userId, level, newDurability) {
        const pickaxe = pickaxeData[level];
        return new Promise((resolve, reject) => {
            Database.db.run(
                'UPDATE user_pickaxes SET level = ?, durability = ?, max_durability = ? WHERE user_id = ?',
                [level, newDurability, pickaxe.durability, userId],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.changes);
                }
            );
        });
    },

    async repairUserPickaxe(userId) {
        return new Promise((resolve, reject) => {
            Database.db.run(
                'UPDATE user_pickaxes SET durability = max_durability WHERE user_id = ?',
                [userId],
                function(err) {
                    if (err) reject(err);
                    else resolve(this.changes);
                }
            );
        });
    }
};