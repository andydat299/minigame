const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const Database = require('../database/database');

// State management cho sicbo betting
const bettingStates = new Map(); // userId -> {betType, channelId, timestamp}

module.exports = {
    name: 'sicbo',
    description: 'Ch∆°i t√†i x·ªâu t·ª± ƒë·ªông v·ªõi nhi·ªÅu ng∆∞·ªùi',

    async execute(message, args, client) {
        // Redirect to slash command
        return message.reply('üé≤ T√≠nh nƒÉng T√†i X·ªâu ch·ªâ h·ªó tr·ª£ Slash Command! S·ª≠ d·ª•ng `/sicbo` ƒë·ªÉ ch∆°i.');
    },

    // X·ª≠ l√Ω button interactions cho prefix command
    async handleButtonClick(interaction, sicboGame) {
        const [, action, param] = interaction.customId.split('_');
        const userId = interaction.user.id;
        const channelId = interaction.channelId;
        const username = interaction.user.username;

        await Database.createUser(userId, username);
        const user = await Database.getUser(userId);

        if (action === 'bet') {
            // L∆∞u tr·∫°ng th√°i c∆∞·ª£c
            bettingStates.set(userId, {
                betType: param,
                channelId: channelId,
                timestamp: Date.now()
            });

            return interaction.reply({ 
                content: `üéØ B·∫°n ƒë√£ ch·ªçn **${this.getBetDisplayName(param)}**!\nüí∞ Ch·ªçn m·ª©c c∆∞·ª£c ho·∫∑c t√πy ch·ªânh s·ªë ti·ªÅn.`, 
                ephemeral: true 
            });
        }

        if (action === 'quick') {
            const betAmount = parseInt(param);
            const state = bettingStates.get(userId);
            
            if (!state || Date.now() - state.timestamp > 300000) { // 5 ph√∫t timeout
                return interaction.reply({ 
                    content: '‚ö†Ô∏è Vui l√≤ng ch·ªçn T√†i/X·ªâu/H√≤a tr∆∞·ªõc khi ch·ªçn m·ª©c c∆∞·ª£c!', 
                    ephemeral: true 
                });
            }

            if (user.balance < betAmount) {
                return interaction.reply({ 
                    content: `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${betAmount.toLocaleString()} coins.`, 
                    ephemeral: true 
                });
            }

            // ƒê·∫∑t c∆∞·ª£c
            const result = sicboGame.placeBet(channelId, userId, state.betType, betAmount);
            
            if (result.success) {
                await Database.updateUserBalance(userId, -betAmount);
                bettingStates.delete(userId);
                
                return interaction.reply({ 
                    content: `‚úÖ ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng!\nüéØ **${this.getBetDisplayName(state.betType)}** - ${betAmount.toLocaleString()} coins`, 
                    ephemeral: true 
                });
            } else {
                return interaction.reply({ 
                    content: `‚ùå ${result.message}`, 
                    ephemeral: true 
                });
            }
        }

        if (action === 'custom') {
            const state = bettingStates.get(userId);
            
            if (!state || Date.now() - state.timestamp > 300000) {
                return interaction.reply({ 
                    content: '‚ö†Ô∏è Vui l√≤ng ch·ªçn T√†i/X·ªâu/H√≤a tr∆∞·ªõc!', 
                    ephemeral: true 
                });
            }

            const modal = new ModalBuilder()
                .setCustomId(`sicbo_custom_modal_${state.betType}`)
                .setTitle(`C∆∞·ª£c ${this.getBetDisplayName(state.betType)} - T√πy ch·ªânh`);

            const amountInput = new TextInputBuilder()
                .setCustomId('bet_amount')
                .setLabel('S·ªë ti·ªÅn c∆∞·ª£c')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('Nh·∫≠p s·ªë ti·ªÅn (t·ªëi thi·ªÉu 50)')
                .setRequired(true)
                .setMaxLength(10);

            const firstActionRow = new ActionRowBuilder().addComponents(amountInput);
            modal.addComponents(firstActionRow);

            return interaction.showModal(modal);
        }

        return false;
    },

    // X·ª≠ l√Ω modal submit
    async handleModalSubmit(interaction, sicboGame) {
        if (!interaction.customId.startsWith('sicbo_custom_modal_')) return false;

        const betType = interaction.customId.split('_')[3];
        const userId = interaction.user.id;
        const channelId = interaction.channelId;
        const betAmount = parseInt(interaction.fields.getTextInputValue('bet_amount'));

        if (isNaN(betAmount) || betAmount < 50) {
            return interaction.reply({ 
                content: '‚ùå S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá! T·ªëi thi·ªÉu 50 coins.', 
                ephemeral: true 
            });
        }

        const user = await Database.getUser(userId);
        if (user.balance < betAmount) {
            return interaction.reply({ 
                content: `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${betAmount.toLocaleString()} coins.`, 
                ephemeral: true 
            });
        }

        // ƒê·∫∑t c∆∞·ª£c
        const result = sicboGame.placeBet(channelId, userId, betType, betAmount);
        
        if (result.success) {
            await Database.updateUserBalance(userId, -betAmount);
            bettingStates.delete(userId);
            
            return interaction.reply({ 
                content: `‚úÖ ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng!\nüéØ **${this.getBetDisplayName(betType)}** - ${betAmount.toLocaleString()} coins`, 
                ephemeral: true 
            });
        } else {
            return interaction.reply({ 
                content: `‚ùå ${result.message}`, 
                ephemeral: true 
            });
        }
    },

    getBetDisplayName(betType) {
        const names = {
            'tai': 'üü¢ T√ÄI (11-17)',
            'xiu': 'üî¥ X·ªàU (4-10)',
            'hoa': 'üíé H√íA (3,18)'
        };
        return names[betType] || betType;
    }
};