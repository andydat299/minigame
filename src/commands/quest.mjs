import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import User from '../models/User.mjs';
import UserQuest from '../models/UserQuest.mjs';
import Quest from '../models/Quest.mjs';
import { formatCurrency } from './util.mjs';
import { 
    getAvailableQuests, 
    acceptQuest, 
    claimQuestRewards, 
    getExpForNextLevel 
} from '../game/questManager.mjs';

export const data = new SlashCommandBuilder()
    .setName('quest')
    .setDescription('H·ªá th·ªëng nhi·ªám v·ª•')
    .addSubcommand(subcommand =>
        subcommand
            .setName('list')
            .setDescription('Xem danh s√°ch nhi·ªám v·ª•')
            .addStringOption(option =>
                option.setName('type')
                    .setDescription('Lo·∫°i nhi·ªám v·ª•')
                    .addChoices(
                        { name: 'T·∫•t c·∫£', value: 'all' },
                        { name: 'H√†ng ng√†y', value: 'daily' },
                        { name: 'H√†ng tu·∫ßn', value: 'weekly' },
                        { name: 'C·ªët truy·ªán', value: 'story' },
                        { name: 'Th√†nh t·ª±u', value: 'achievement' }
                    )))
    .addSubcommand(subcommand =>
        subcommand
            .setName('active')
            .setDescription('Xem nhi·ªám v·ª• ƒëang th·ª±c hi·ªán'))
    .addSubcommand(subcommand =>
        subcommand
            .setName('accept')
            .setDescription('Nh·∫≠n nhi·ªám v·ª•')
            .addStringOption(option =>
                option.setName('quest_id')
                    .setDescription('ID c·ªßa nhi·ªám v·ª•')
                    .setRequired(true)))
    .addSubcommand(subcommand =>
        subcommand
            .setName('claim')
            .setDescription('Nh·∫≠n th∆∞·ªüng nhi·ªám v·ª•')
            .addStringOption(option =>
                option.setName('quest_id')
                    .setDescription('ID c·ªßa nhi·ªám v·ª•')
                    .setRequired(true)))
    .addSubcommand(subcommand =>
        subcommand
            .setName('abandon')
            .setDescription('H·ªßy b·ªè nhi·ªám v·ª•')
            .addStringOption(option =>
                option.setName('quest_id')
                    .setDescription('ID c·ªßa nhi·ªám v·ª•')
                    .setRequired(true)))
    .addSubcommand(subcommand =>
        subcommand
            .setName('profile')
            .setDescription('Xem th√¥ng tin quest profile'));

export async function execute(interaction) {
    const subcommand = interaction.options.getSubcommand();
    
    switch (subcommand) {
        case 'list':
            await handleList(interaction);
            break;
        case 'active':
            await handleActive(interaction);
            break;
        case 'accept':
            await handleAccept(interaction);
            break;
        case 'claim':
            await handleClaim(interaction);
            break;
        case 'abandon':
            await handleAbandon(interaction);
            break;
        case 'profile':
            await handleProfile(interaction);
            break;
    }
}

async function handleList(interaction) {
    const type = interaction.options.getString('type') || 'all';
    const userId = interaction.user.id;
    const guildId = interaction.guildId;
    
    const questType = type === 'all' ? null : type;
    const availableQuests = await getAvailableQuests(userId, guildId, questType);
    
    const embed = new EmbedBuilder()
        .setColor('#48dbfb')
        .setTitle('üéØ Nhi·ªám V·ª• Kh·∫£ D·ª•ng')
        .setTimestamp();
    
    if (availableQuests.length === 0) {
        embed.setDescription('Kh√¥ng c√≥ nhi·ªám v·ª• n√†o kh·∫£ d·ª•ng.');
        return interaction.reply({ embeds: [embed] });
    }
    
    // Group by type
    const questsByType = {
        daily: [],
        weekly: [],
        story: [],
        achievement: []
    };
    
    availableQuests.forEach(quest => {
        questsByType[quest.type].push(quest);
    });
    
    // Add fields for each type
    const typeEmojis = {
        daily: 'üìÖ',
        weekly: 'üóìÔ∏è',
        story: 'üìö',
        achievement: 'üèÜ'
    };
    
    const typeNames = {
        daily: 'H√†ng Ng√†y',
        weekly: 'H√†ng Tu·∫ßn',
        story: 'C·ªët Truy·ªán',
        achievement: 'Th√†nh T·ª±u'
    };
    
    for (const [questType, quests] of Object.entries(questsByType)) {
        if (quests.length > 0) {
            const questList = quests.slice(0, 5).map(quest => {
                const difficultyEmoji = getDifficultyEmoji(quest.difficulty);
                return `**${quest.questId}** ${difficultyEmoji}\n${quest.name}\n*${quest.description}*\n`;
            }).join('\n');
            
            embed.addFields({
                name: `${typeEmojis[questType]} ${typeNames[questType]}`,
                value: questList,
                inline: false
            });
        }
    }
    
    embed.setFooter({ text: 'S·ª≠ d·ª•ng /quest accept <quest_id> ƒë·ªÉ nh·∫≠n nhi·ªám v·ª•' });
    
    await interaction.reply({ embeds: [embed] });
}

async function handleActive(interaction) {
    const userId = interaction.user.id;
    const guildId = interaction.guildId;
    
    const activeQuests = await UserQuest.find({ userId, guildId, status: 'active' }).sort({ startedAt: -1 });
    
    const embed = new EmbedBuilder()
        .setColor('#feca57')
        .setTitle('‚ö° Nhi·ªám V·ª• ƒêang Th·ª±c Hi·ªán')
        .setTimestamp();
    
    if (activeQuests.length === 0) {
        embed.setDescription('B·∫°n kh√¥ng c√≥ nhi·ªám v·ª• n√†o ƒëang th·ª±c hi·ªán.\nS·ª≠ d·ª•ng `/quest list` ƒë·ªÉ xem nhi·ªám v·ª• kh·∫£ d·ª•ng.');
        return interaction.reply({ embeds: [embed] });
    }
    
    const questDetails = [];
    
    for (const userQuest of activeQuests) {
        const quest = await Quest.findOne({ questId: userQuest.questId });
        if (!quest) continue;
        
        const progress = getQuestProgressText(quest, userQuest);
        const timeLeft = userQuest.expiresAt ? 
            `‚è∞ ${Math.ceil((userQuest.expiresAt - Date.now()) / (1000 * 60 * 60))}h` : 
            '‚è∞ Kh√¥ng gi·ªõi h·∫°n';
        
        questDetails.push(
            `**${quest.questId}** ${getDifficultyEmoji(quest.difficulty)}\n` +
            `${quest.name}\n` +
            `${progress}\n` +
            `${timeLeft}\n`
        );
    }
    
    embed.setDescription(questDetails.join('\n'));
    embed.setFooter({ text: 'S·ª≠ d·ª•ng /quest claim <quest_id> ƒë·ªÉ nh·∫≠n th∆∞·ªüng khi ho√†n th√†nh' });
    
    await interaction.reply({ embeds: [embed] });
}

async function handleAccept(interaction) {
    const questId = interaction.options.getString('quest_id');
    const userId = interaction.user.id;
    const guildId = interaction.guildId;
    
    const result = await acceptQuest(userId, guildId, questId);
    
    if (!result.success) {
        const embed = new EmbedBuilder()
            .setColor('#ff6b6b')
            .setTitle('‚ùå Kh√¥ng Th·ªÉ Nh·∫≠n Nhi·ªám V·ª•')
            .setDescription(result.message)
            .setTimestamp();
        
        return interaction.reply({ embeds: [embed], ephemeral: true });
    }
    
    const quest = result.quest;
    const embed = new EmbedBuilder()
        .setColor('#00ff00')
        .setTitle('‚úÖ ƒê√£ Nh·∫≠n Nhi·ªám V·ª•')
        .setDescription(`B·∫°n ƒë√£ nh·∫≠n nhi·ªám v·ª•: **${quest.name}**`)
        .addFields(
            { name: 'üìù M√¥ T·∫£', value: quest.description, inline: false },
            { name: 'üéØ Y√™u C·∫ßu', value: getRequirementsText(quest), inline: false },
            { name: 'üéÅ Ph·∫ßn Th∆∞·ªüng', value: getRewardsText(quest), inline: false }
        )
        .setTimestamp();
    
    if (quest.timeLimit) {
        embed.addFields({ name: '‚è∞ Th·ªùi H·∫°n', value: `${quest.timeLimit} gi·ªù`, inline: true });
    }
    
    await interaction.reply({ embeds: [embed] });
}

async function handleClaim(interaction) {
    const questId = interaction.options.getString('quest_id');
    const userId = interaction.user.id;
    const guildId = interaction.guildId;
    
    const result = await claimQuestRewards(userId, guildId, questId);
    
    if (!result.success) {
        const embed = new EmbedBuilder()
            .setColor('#ff6b6b')
            .setTitle('‚ùå Kh√¥ng Th·ªÉ Nh·∫≠n Th∆∞·ªüng')
            .setDescription(result.message)
            .setTimestamp();
        
        return interaction.reply({ embeds: [embed], ephemeral: true });
    }
    
    const rewards = result.rewards;
    const embed = new EmbedBuilder()
        .setColor('#ffd700')
        .setTitle('üéâ ƒê√£ Ho√†n Th√†nh Nhi·ªám V·ª•!')
        .setDescription('Ch√∫c m·ª´ng! B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ph·∫ßn th∆∞·ªüng:')
        .setTimestamp();
    
    const rewardText = [];
    if (rewards.coins) rewardText.push(`üí∞ ${formatCurrency(rewards.coins)}`);
    if (rewards.exp) rewardText.push(`‚≠ê ${rewards.exp} EXP`);
    if (rewards.items && rewards.items.length > 0) {
        rewards.items.forEach(item => rewardText.push(`üì¶ ${item.name} x${item.count}`));
    }
    if (rewards.title) rewardText.push(`üè∑Ô∏è Title: ${rewards.title}`);
    
    embed.addFields({ name: 'üéÅ Ph·∫ßn Th∆∞·ªüng', value: rewardText.join('\n'), inline: false });
    
    if (result.newLevel > 1) {
        embed.addFields({ name: 'üÜô Level Up!', value: `B·∫°n ƒë√£ l√™n level ${result.newLevel}!`, inline: false });
    }
    
    await interaction.reply({ embeds: [embed] });
}

async function handleAbandon(interaction) {
    const questId = interaction.options.getString('quest_id');
    const userId = interaction.user.id;
    const guildId = interaction.guildId;
    
    const userQuest = await UserQuest.findOne({ userId, guildId, questId, status: 'active' });
    if (!userQuest) {
        const embed = new EmbedBuilder()
            .setColor('#ff6b6b')
            .setTitle('‚ùå Kh√¥ng T√¨m Th·∫•y')
            .setDescription('Kh√¥ng t√¨m th·∫•y nhi·ªám v·ª• ƒëang th·ª±c hi·ªán v·ªõi ID n√†y.')
            .setTimestamp();
        
        return interaction.reply({ embeds: [embed], ephemeral: true });
    }
    
    userQuest.status = 'abandoned';
    await userQuest.save();
    
    const embed = new EmbedBuilder()
        .setColor('#ff6b6b')
        .setTitle('üóëÔ∏è ƒê√£ H·ªßy Nhi·ªám V·ª•')
        .setDescription(`ƒê√£ h·ªßy nhi·ªám v·ª•: **${questId}**`)
        .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
}

async function handleProfile(interaction) {
    const userId = interaction.user.id;
    const guildId = interaction.guildId;
    
    let user = await User.findOne({ userId, guildId });
    if (!user) user = await User.create({ userId, guildId });
    
    const level = user.level || 1;
    const currentExp = user.exp || 0;
    const expForNext = getExpForNextLevel(level);
    const expNeeded = expForNext - currentExp;
    const questsCompleted = user.questsCompleted || 0;
    
    const activeCount = await UserQuest.countDocuments({ userId, guildId, status: 'active' });
    const completedCount = await UserQuest.countDocuments({ userId, guildId, status: 'completed' });
    
    const embed = new EmbedBuilder()
        .setColor('#48dbfb')
        .setTitle(`üéØ Quest Profile - ${interaction.user.username}`)
        .addFields(
            { name: '‚≠ê Level', value: `${level}`, inline: true },
            { name: 'üîÆ EXP', value: `${currentExp.toLocaleString()}/${expForNext.toLocaleString()}`, inline: true },
            { name: 'üìà EXP C·∫ßn', value: `${expNeeded.toLocaleString()}`, inline: true },
            { name: 'üéØ ƒêang L√†m', value: `${activeCount}`, inline: true },
            { name: '‚úÖ ƒê√£ Ho√†n Th√†nh', value: `${completedCount}`, inline: true },
            { name: 'üèÜ T·ªïng Quest', value: `${questsCompleted}`, inline: true }
        )
        .setTimestamp();
    
    if (user.activeTitle) {
        embed.addFields({ name: 'üè∑Ô∏è Title Hi·ªán T·∫°i', value: user.activeTitle, inline: false });
    }
    
    if (user.titles && user.titles.length > 0) {
        embed.addFields({ name: 'üéñÔ∏è Titles S·ªü H·ªØu', value: user.titles.join(', '), inline: false });
    }
    
    await interaction.reply({ embeds: [embed] });
}

// Helper functions
function getDifficultyEmoji(difficulty) {
    const emojis = {
        easy: 'üü¢',
        medium: 'üü°',
        hard: 'üî¥',
        legendary: 'üü£'
    };
    return emojis[difficulty] || '‚ö™';
}

function getRequirementsText(quest) {
    const req = quest.requirements;
    const requirements = [];
    
    if (req.fishCatch > 0) requirements.push(`üé£ C√¢u ${req.fishCatch} con c√°`);
    if (req.coinsEarn > 0) requirements.push(`üí∞ Ki·∫øm ${formatCurrency(req.coinsEarn)}`);
    if (req.coinsSpend > 0) requirements.push(`üí∏ Chi ${formatCurrency(req.coinsSpend)}`);
    if (req.gamblingWins > 0) requirements.push(`üé≤ Th·∫Øng ${req.gamblingWins} v√°n casino`);
    if (req.achievementsUnlock > 0) requirements.push(`üèÜ M·ªü kh√≥a ${req.achievementsUnlock} th√†nh t·ª±u`);
    if (req.rodUpgrade > 0) requirements.push(`üîß N√¢ng c·∫•p c·∫ßn c√¢u l√™n level ${req.rodUpgrade}`);
    if (req.itemsCollect && req.itemsCollect.length > 0) {
        req.itemsCollect.forEach(item => {
            requirements.push(`üì¶ Thu th·∫≠p ${item.name} x${item.count}`);
        });
    }
    
    return requirements.join('\n') || 'Kh√¥ng c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát';
}

function getRewardsText(quest) {
    const rewards = quest.rewards;
    const rewardText = [];
    
    if (rewards.coins > 0) rewardText.push(`üí∞ ${formatCurrency(rewards.coins)}`);
    if (rewards.exp > 0) rewardText.push(`‚≠ê ${rewards.exp} EXP`);
    if (rewards.items && rewards.items.length > 0) {
        rewards.items.forEach(item => {
            rewardText.push(`üì¶ ${item.name} x${item.count}`);
        });
    }
    if (rewards.title) rewardText.push(`üè∑Ô∏è Title: ${rewards.title}`);
    
    return rewardText.join('\n') || 'Kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng';
}

function getQuestProgressText(quest, userQuest) {
    const req = quest.requirements;
    const prog = userQuest.progress;
    const progressItems = [];
    
    if (req.fishCatch > 0) {
        const current = Math.min(prog.fishCatch, req.fishCatch);
        const emoji = current >= req.fishCatch ? '‚úÖ' : 'üîÑ';
        progressItems.push(`${emoji} C√¢u c√°: ${current}/${req.fishCatch}`);
    }
    
    if (req.coinsEarn > 0) {
        const current = Math.min(prog.coinsEarn, req.coinsEarn);
        const emoji = current >= req.coinsEarn ? '‚úÖ' : 'üîÑ';
        progressItems.push(`${emoji} Ki·∫øm ti·ªÅn: ${formatCurrency(current)}/${formatCurrency(req.coinsEarn)}`);
    }
    
    if (req.coinsSpend > 0) {
        const current = Math.min(prog.coinsSpend, req.coinsSpend);
        const emoji = current >= req.coinsSpend ? '‚úÖ' : 'üîÑ';
        progressItems.push(`${emoji} Chi ti·ªÅn: ${formatCurrency(current)}/${formatCurrency(req.coinsSpend)}`);
    }
    
    if (req.gamblingWins > 0) {
        const current = Math.min(prog.gamblingWins, req.gamblingWins);
        const emoji = current >= req.gamblingWins ? '‚úÖ' : 'üîÑ';
        progressItems.push(`${emoji} Th·∫Øng casino: ${current}/${req.gamblingWins}`);
    }
    
    if (req.achievementsUnlock > 0) {
        const current = Math.min(prog.achievementsUnlock, req.achievementsUnlock);
        const emoji = current >= req.achievementsUnlock ? '‚úÖ' : 'üîÑ';
        progressItems.push(`${emoji} M·ªü kh√≥a th√†nh t·ª±u: ${current}/${req.achievementsUnlock}`);
    }
    
    if (req.rodUpgrade > 0) {
        const current = Math.min(prog.rodUpgrade, req.rodUpgrade);
        const emoji = current >= req.rodUpgrade ? '‚úÖ' : 'üîÑ';
        progressItems.push(`${emoji} N√¢ng c·∫•p c·∫ßn: Level ${current}/${req.rodUpgrade}`);
    }
    
    if (req.dailyStreak > 0) {
        const current = Math.min(prog.dailyStreak, req.dailyStreak);
        const emoji = current >= req.dailyStreak ? '‚úÖ' : 'üîÑ';
        progressItems.push(`${emoji} Daily streak: ${current}/${req.dailyStreak} ng√†y`);
    }
    
    // Add item collection progress
    if (req.itemsCollect && req.itemsCollect.length > 0) {
        req.itemsCollect.forEach(reqItem => {
            const progItem = prog.itemsCollect?.find(item => item.name === reqItem.name);
            const current = Math.min(progItem?.count || 0, reqItem.count);
            const emoji = current >= reqItem.count ? '‚úÖ' : 'üîÑ';
            progressItems.push(`${emoji} ${reqItem.name}: ${current}/${reqItem.count}`);
        });
    }
    
    return progressItems.join('\n') || 'Ti·∫øn ƒë·ªô kh√¥ng x√°c ƒë·ªãnh';
}