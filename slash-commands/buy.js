const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const Database = require('../database/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('buy')
        .setDescription('Mua v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng')
        .addIntegerOption(option =>
            option.setName('item')
                .setDescription('ID c·ªßa v·∫≠t ph·∫©m mu·ªën mua')
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName('quantity')
                .setDescription('S·ªë l∆∞·ª£ng mu·ªën mua')
                .setMinValue(1)
                .setRequired(false)),
    
    async execute(interaction) {
        const userId = interaction.user.id;
        const username = interaction.user.username;
        const itemId = interaction.options.getInteger('item');
        const quantity = interaction.options.getInteger('quantity') || 1;

        // T·∫°o user n·∫øu ch∆∞a c√≥
        await Database.createUser(userId, username);
        const user = await Database.getUser(userId);

        try {
            // L·∫•y th√¥ng tin item
            const item = await this.getShopItem(itemId);
            
            if (!item) {
                return interaction.reply({ 
                    content: '‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m n√†y trong c·ª≠a h√†ng!', 
                    ephemeral: true 
                });
            }

            const totalCost = item.price * quantity;

            if (user.balance < totalCost) {
                return interaction.reply({ 
                    content: `‚ùå B·∫°n c·∫ßn ${totalCost.toLocaleString()} coins ƒë·ªÉ mua ${quantity}x ${item.name}!`, 
                    ephemeral: true 
                });
            }

            // C·∫≠p nh·∫≠t balance
            await Database.updateUserBalance(userId, -totalCost);
            
            // Th√™m v√†o inventory
            await this.addToInventory(userId, itemId, quantity);

            const embed = new EmbedBuilder()
                .setTitle('üéâ Mua h√†ng th√†nh c√¥ng!')
                .setDescription(`B·∫°n ƒë√£ mua **${quantity}x ${item.emoji} ${item.name}**`)
                .addFields(
                    { name: 'üí∞ T·ªïng chi ph√≠', value: `${totalCost.toLocaleString()} coins`, inline: true },
                    { name: 'üè¶ S·ªë d∆∞ c√≤n l·∫°i', value: `${(user.balance - totalCost).toLocaleString()} coins`, inline: true },
                    { name: 'üì¶ V·∫≠t ph·∫©m', value: item.description, inline: false }
                )
                .setColor('#00ff00')
                .setFooter({ text: 'S·ª≠ d·ª•ng /inventory ƒë·ªÉ xem kho ƒë·ªì' });

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Buy error:', error);
            await interaction.reply({ 
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi mua v·∫≠t ph·∫©m!', 
                ephemeral: true 
            });
        }
    },

    async getShopItem(itemId) {
        return new Promise((resolve, reject) => {
            Database.db.get(
                'SELECT * FROM shop_items WHERE id = ?',
                [itemId],
                (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                }
            );
        });
    },

    async addToInventory(userId, itemId, quantity) {
        return new Promise((resolve, reject) => {
            // Ki·ªÉm tra xem user ƒë√£ c√≥ item n√†y ch∆∞a
            Database.db.get(
                'SELECT * FROM user_inventory WHERE user_id = ? AND item_id = ?',
                [userId, itemId],
                (err, existingItem) => {
                    if (err) {
                        reject(err);
                        return;
                    }

                    if (existingItem) {
                        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
                        Database.db.run(
                            'UPDATE user_inventory SET quantity = quantity + ? WHERE user_id = ? AND item_id = ?',
                            [quantity, userId, itemId],
                            function(updateErr) {
                                if (updateErr) reject(updateErr);
                                else resolve(this.changes);
                            }
                        );
                    } else {
                        // Th√™m item m·ªõi
                        Database.db.run(
                            'INSERT INTO user_inventory (user_id, item_id, quantity) VALUES (?, ?, ?)',
                            [userId, itemId, quantity],
                            function(insertErr) {
                                if (insertErr) reject(insertErr);
                                else resolve(this.lastID);
                            }
                        );
                    }
                }
            );
        });
    }
};